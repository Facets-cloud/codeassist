all_agents.py: This file is responsible for managing and coordinating actions across
  different agents in the system. It likely provides abstractions to initialize, control,
  and communicate with various agents, ensuring they work together smoothly.
context.yml: This file stores contextual information about various files in the codebase.
  It is used to help developers understand the purpose and functionality of each file
  by providing concise descriptions, which can assist in both development and collaborative
  environments.
project_context.txt: This file stores context information for the project, helping
  developers understand the purpose and functionality of the project, specifically
  focusing on the development of an AI agent to write code. It references the swarm
  project located at https://github.com/openai/swarm.git.
run.py: The `run.py` file initializes and runs a command line interface for the Swarm
  application. It sets up logging to record messages in a log file (`app.log`), defines
  functions to process and print streaming responses, and manages the interaction
  loop with the user. The primary function, `run_demo_loop`, executes the simulated
  client-server communication using a given starting agent, handling user input and
  agent responses until the application exits. It defaults to using a `triage_agent`
  as the starting agent when run as a standalone script.
server.py: The server.py file sets up a Flask web server to handle chat-related HTTP
  API endpoints. It interfaces with a MongoDB database to store and retrieve chat
  messages. Key functionalities include starting new chat sessions, handling ongoing
  chat communications, and retrieving chat history with pagination. It uses Flask
  for the web framework and PyMongo for MongoDB interactions. UUID is used for unique
  chat thread identification, and the server leverages environment variables to configure
  database connections. The implementation provides a stub for agent responses, suggesting
  areas for further development.
tools/code_assistant.py: This script is likely responsible for providing coding assistance
  functionalities within the system. It might include features like auto-completion,
  error checking, and code suggestions to enhance the coding efficiency and experience
  for developers.
tools/context_assistant.py: The Context Assistant class in this file is responsible
  for managing and updating contextual information for the project's codebase. It
  reads from and writes to the context.yml to store and retrieve context details,
  aiding developers in understanding the code structure and purpose.
tools/git_assistant.py: This module is responsible for managing Git operations within
  the system. It includes functionalities like checking the current Git status, retrieving
  the diff of changes, adding files to the staging area, committing changes with a
  meaningful message, pushing changes to a remote repository, listing recent git commits,
  and unstaging changes. The updated PROMPT reflects the expanded capabilities.
tools/triage_assistant.py: This file houses the Triage Assistant class, which determines
  and directs tasks to the appropriate agent (Coding, Git, or Context Assistant) based
  on the nature of the task. It helps manage workflow efficiently by invoking the
  right assistant for specific tasks.
